/*
Copyright Sabbir Hossain.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/sabbir-hossain70/crd/pkg/apis/crd.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SabbirLister helps list Sabbirs.
// All objects returned here must be treated as read-only.
type SabbirLister interface {
	// List lists all Sabbirs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Sabbir, err error)
	// Sabbirs returns an object that can list and get Sabbirs.
	Sabbirs(namespace string) SabbirNamespaceLister
	SabbirListerExpansion
}

// sabbirLister implements the SabbirLister interface.
type sabbirLister struct {
	indexer cache.Indexer
}

// NewSabbirLister returns a new SabbirLister.
func NewSabbirLister(indexer cache.Indexer) SabbirLister {
	return &sabbirLister{indexer: indexer}
}

// List lists all Sabbirs in the indexer.
func (s *sabbirLister) List(selector labels.Selector) (ret []*v1.Sabbir, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Sabbir))
	})
	return ret, err
}

// Sabbirs returns an object that can list and get Sabbirs.
func (s *sabbirLister) Sabbirs(namespace string) SabbirNamespaceLister {
	return sabbirNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SabbirNamespaceLister helps list and get Sabbirs.
// All objects returned here must be treated as read-only.
type SabbirNamespaceLister interface {
	// List lists all Sabbirs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Sabbir, err error)
	// Get retrieves the Sabbir from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Sabbir, error)
	SabbirNamespaceListerExpansion
}

// sabbirNamespaceLister implements the SabbirNamespaceLister
// interface.
type sabbirNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Sabbirs in the indexer for a given namespace.
func (s sabbirNamespaceLister) List(selector labels.Selector) (ret []*v1.Sabbir, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Sabbir))
	})
	return ret, err
}

// Get retrieves the Sabbir from the indexer for a given namespace and name.
func (s sabbirNamespaceLister) Get(name string) (*v1.Sabbir, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sabbir"), name)
	}
	return obj.(*v1.Sabbir), nil
}
